#### Number operations ####
All operations return a raw number other than addressof,
create, func arg and return.

-> n id        i.get()
=> MODEL: MIdentityExpressionNumber

-> n postinc   i.postInc().get()
=> MODEL: MPostfixExpressionNumberInc

-> n postdec   i.postDec().get()
=> MODEL: MPostfixExpressionNumberDec

-> n preinc    i.set(i.get() + 1)
=> MODEL: MPrefixExpressionNumberInc

-> n predec    i.set(i.get() - 1)
=> MODEL: MPrefixExpressionNumberDec

-> n infix     i.get() + i.get()
=> MODEL: MInfixExpressionPlain

-> n assign    i.set(j.get())
=> MODEL: MInfixAssignmentWithNumberOnLeft

-> n compound  i.set(i.get() + 2)
=> MODEL: MCompoundWithNumberOnLeft

-> n addressof i.addressof()
=> MODEL: MAddressOfExpression

-> n unary     -i.get()
=> MODEL: MPrefixExpressionPlain

-> n create    MInteger i = MInteger.valueOf(2)
=> MODEL: MValueOfExpressionNumber

-> n func arg  func(MInteger.valueOf(i.get()))
=> MODEL: MValueOfExpressionNumber

-> n return    return MInteger.valueOf(i.get())
=> MODEL: MValueOfExpressionNumber



#### Pointer operations ####
All operations return a pointer other than star.

-> p id        p
=> MODEL: MIdentityExpressionPtr

-> p postinc   p.ptrPostInc()
=> MODEL: MPostfixExpressionPointerInc

-> p postdec   p.ptrPostDec()
=> MODEL: MPostfixExpressionPointerDec

-> p preinc    p.ptrAdjust(1)
=> MODEL: MPrefixExpressionPointerInc

-> p predec    p.ptrAdjust(-1)
=> MODEL: MPrefixExpressionPointerDec

-> p infix     p.add(3) (p + 3)
=> MODEL: MInfixExpressionWithPtrOnLeft

-> p infix     p.add(5) (5 + p)
=> MODEL: MInfixExpressionWithPtrOnRight

-> p assign    p = j
=> MODEL: MInfixExpressionPlain

-> p compound  ptr.ptrAdjust(-4) (p -= 4)
=> MODEL: MCompoundWithPtrOnLeft

-> p deref left assign  p.set(7)
=> MODEL: MInfixAssignmentWithDerefOnLeft

-> p deref left compound p.set(p.get() + 2)
=> MODEL: MCompoundWithDerefOnLeft

-> p deref postfix p.ptrPostInc().postInc() ((*(p++))++)
=> MODEL: MPostfixWithDeref

-> p deref prefix p.ptrAdjust(-1).postInc() ((*(--p))++)
=> MODEL: MPrefixWithDeref

-> p addressof ptr.addressof()
=> MODEL: MAddressOfExpression

-> p star      ptr.get()
=> MODEL: MPrefixExpressionPointerStar

-> p create null MInteger p = PTR.newNull()
=> MODEL: MPtrCreateNull

-> p func arg func(p.ptrCopy())
=> MODEL: MPtrCopy

-> p return   return p.ptrCopy()
=> MODEL: MPtrCopy



#### Bitfield operations ####
All operations return a raw number.

-> b id        obj.get__b()
=> MODEL: MIdentityExpressionBitfield

-> b postinc   obj.postInc__b()
=> MODEL: MPostfixExpressionBitfieldInc

-> b postdec   obj.postDec__b()
=> MODEL: MPostfixExpressionBitfieldDec

-> b preinc    obj.set__b(obj.get__b() + 1)
=> MODEL: MPrefixExpressionBitfieldInc

-> b predec    obj.set__b(obj.get__b() - 1)
=> MODEL: MPrefixExpressionBitfieldDec

-> b infix     obj.get__b() + obj.get__c()
=> MODEL: MPrefixExpressionPlain

-> b assign    obj.set__b(4)
=> MODEL: MInfixAssignmentWithBitfieldOnLeft

-> b compound  obj.set__b(obj.get__b() + 2)
=> MODEL: MCompoundWithBitfieldOnLeft

